<?xml version="1.0" encoding="UTF-8"?>

<!--

   Ant build script.

   Compiles the WEKA examples.

   author: fracpete (fracpete at waikato dot ac dot nz)
   version: $Revision$

-->

<project name="wekaexamples" default="dist" basedir=".">
   <!-- compile options -->
   <property name="build.sysclasspath" value="ignore" />
   <property name="build.compiler"     value="modern" />
   <property name="debug"              value="on" />
   <property name="deprecation"        value="off" />
   <property name="optimization"       value="off" />
   <property name="memory"             value="800m"/>
   <property name="guiclass"           value="weka.gui.GUIChooser"/>
   <property name="jvm_options"        value=""/>  <!-- e.g., "-XX:+UseConcMarkSweepGC" for parallel GC -->
   <property environment="env"/>

   <!-- directories -->
   <property name="dist"          value="dist" />
   <property name="build"         value="build/classes" />
   <property name="build.java"    value="${build}/java" />
   <property name="build.groovy"  value="${build}/groovy" />
   <property name="doc"           value="doc/api" />
   <property name="src"           value="src/main" />
   <property name="src.java"      value="${src}/java" />
   <property name="src.groovy"    value="${src}/groovy" />
   <property name="src.jython"    value="${src}/jython" />
   <property name="lib"           value="lib" />
   <property name="documentation" value="doc/documentation" />

   <!-- CLASSPATH -->
   <path id="project.class.path">
      <pathelement location="." />
      <fileset dir="${lib}">
         <include name="*.jar"/>
         <include name="*.zip"/>
      </fileset>
   </path>

   <!-- tasks -->
   <taskdef name="groovy"
            classname="org.codehaus.groovy.ant.Groovy"
            classpathref="project.class.path"/>
   <taskdef name="groovyc"
            classname="org.codehaus.groovy.ant.Groovyc"
            classpathref="project.class.path"/>
   
   <!-- targets -->
   <target name="init" depends="setup, copyFiles" description="Initializes the Project."/>

   <target name="setup" description="Creates the output directories.">
      <tstamp />
      <mkdir dir="${build}" />
      <mkdir dir="${build.java}" />
      <mkdir dir="${build.groovy}" />
      <mkdir dir="${dist}" />
      <mkdir dir="${doc}" />
   </target>

   <target name="copyFiles" description="Copies files to the ${dist} directory.">
      <!-- Java -->
      <copy todir="${dist}">
         <fileset dir="${lib}" includes="*.jar"/>
         <fileset dir="${lib}" includes="*.zip"/>
      </copy>
      <copy todir="${build}">
         <fileset dir="${src}" includes="**/*.gif"/>
         <fileset dir="${src}" includes="**/*.jpg"/>
         <fileset dir="${src}" includes="**/*.png"/>
         <fileset dir="${src}" includes="**/*.props"/>
         <fileset dir="${src}" includes="**/*.txt"/>
         <fileset dir="${src}" includes="**/README"/>
      </copy>
   </target>

   <!-- removeJar -->
   <target name="removeJar" description="Deletes the current jar archives.">
      <delete file="${dist}/${ant.project.name}*.jar"/>
   </target>
   
   <!-- clean -->
   <target name="clean" depends="removeJar, cleanTmp" description="Removes autogenerated files.">
      <delete failonerror="false">
         <fileset dir="${basedir}" defaultexcludes="no">
            <include name="**/*.class" />
            <include name="**/*.scc" />
            <include name="**/.#*" />
         </fileset>
      </delete>

      <delete dir="${build}" failonerror="false" />
      <delete dir="${dist}" failonerror="false" />
   </target>

   <!-- cleanTmp -->
   <target name="cleanTmp" description="Removes temporary files.">
      <delete failonerror="false">
         <fileset dir="${basedir}" defaultexcludes="no">
            <include name="**/*.scc" />
            <include name="**/*~" />
         </fileset>
      </delete>
   </target>

   <!-- compile -->
   <target name="compile" depends="init" description="Compiles the classes.">
      <echo message="Compiling classes for ${ant.project.name}." />

      <!-- Java -->
      <javac srcdir="${src.java}" destdir="${build.java}" optimize="${optimization}" 
             debug="${debug}" deprecation="${deprecation}"
             fork="yes" memoryMaximumSize="256m"
             source="1.8" target="1.8">
         <include name="**/*"/>

         <classpath refid="project.class.path" />
         <classpath>
            <pathelement path="${java.class.path}" />
            <pathelement location="." />
         </classpath>
      </javac>

      <!-- Groovy -->
      <groovyc srcdir="${src.groovy}" destdir="${build.groovy}" 
               fork="yes" memoryMaximumSize="256m">
         <include name="**/*"/>

         <classpath refid="project.class.path" />
         <classpath>
            <pathelement path="${java.class.path}" />
            <pathelement location="." />
         </classpath>
      </groovyc>
   </target>

   <!-- update -->
   <target name="update" depends="init" description="Updates the base weka.jar in the ${lib} directory.">
     <condition property="weka_ok">
       <isset property="weka"/>
     </condition>
     <fail message="Property 'weka' not set! Use '-Dweka=...' in your ant call to set the WEKA project directory." unless="weka_ok"/>

     <ant inheritAll="false" dir="${weka}" target="clean"/>
     <ant inheritAll="false" dir="${weka}" target="exejar"/>
     <copy todir="${lib}">
       <fileset dir="${weka}/dist" includes="weka.jar"/>
     </copy>
   </target>

   <!-- create a property containing all .jar files, no prefix, and seperated with a space 
        taken from here:
        http://martin.ankerl.com/2005/11/30/howto-create-manifestmf-classpath-from-ant/ -->
   <pathconvert property="libs.project" pathsep=" ">
     <mapper>
       <chainedmapper>
         <!-- remove absolute path -->
         <flattenmapper />
       </chainedmapper>
     </mapper>

     <path>
       <!-- "lib" contains all jar files -->
       <fileset dir="${lib}">
         <include name="**/*.jar" />
         <include name="**/*.zip" />
         <exclude name="**/*-src-*" />
       </fileset>
     </path>
   </pathconvert>

   <!-- dist -->
   <target name="dist" depends="init, removeJar, compile" description="Generates the jar archives.">
      <!-- Java -->
      <jar jarfile="${dist}/${ant.project.name}-java.jar">
         <fileset dir="${build.java}">
            <include name="*" />
            <include name="**/*" />
         </fileset>

         <manifest>
            <attribute name="Built-By"   value="${user.name}"/>
            <attribute name="Main-Class" value="${guiclass}"/>
            <attribute name="Class-Path" value="${libs.project}"/>
         </manifest>
      </jar>
      
      <!-- Groovy -->
      <jar jarfile="${dist}/${ant.project.name}-groovy.jar">
         <fileset dir="${build.groovy}">
            <include name="*" />
            <include name="**/*" />
         </fileset>

         <manifest>
            <attribute name="Built-By"   value="${user.name}"/>
            <attribute name="Class-Path" value="${libs.project}"/>
         </manifest>
      </jar>
   </target>

   <!-- archive -->
   <target name="archive" depends="cleanTmp, dist" description="Generates are gzipped tar from the source code.">
     <tstamp/>
     <zip destfile="${dist}/${ant.project.name}-src.zip"
          basedir="."
          includes="${src}/**/* ${documentation}/**/* build.xml README.md .*-default"/>
   </target>

   <!-- docs -->
   <target name="docs" description="Generates API documentation.">
      <!-- Java -->
      <javadoc destdir="${doc}" 
               access="protected" 
               use="true" 
               notree="false" 
               nonavbar="false" 
               noindex="false" 
               splitindex="true" 
               author="true" 
               version="true" 
               nodeprecatedlist="false" 
               nodeprecated="false" 
               sourcepath="${src.java}"  
               doctitle="${ant.project.name} API" 
               packagenames="*"
               maxmemory="256m">
         <classpath refid="project.class.path" />
         <classpath>
            <pathelement path="${java.class.path}" />
            <pathelement location="." />
         </classpath>
      </javadoc>
   </target>

   <!-- run-java -->
   <target name="run-java" depends="dist" description="Starts the Java GUI (${guiclass}).">
      <java classname="${guiclass}" fork="yes" maxmemory="${memory}">
         <classpath>
            <pathelement path="${java.class.path}" />
            <pathelement path="${project.class.path}" />
            <fileset dir="${lib}">
               <include name="*.jar"/>
               <include name="*.zip"/>
            </fileset>
         </classpath>
         <jvmarg line="${jvm_options}"/>
      </java>
   </target>
</project>
