<project name="weka-package" default="compile" basedir=".">
<!-- 
  ===========================================================================
   Ant build file for kfGroovy.

   Type ant -projecthelp for targets and descriptions.

   $Revision$
  ===========================================================================
-->

  <!-- set global properties for this build -->
  <property name="src" value="src/main/java"/>
  <property name="src-test" value="src/test/java"/>
  <property name="lib" value="lib" />
  <property name="build" value="build"/>
  <property name="dist"  value="dist"/>
  <property name="doc"  value="doc"/>
  <property name="javac_max_memory" value="256m"/>
  <property name="debug" value="on" />
  <property name="package" value="kfGroovy" />

  <target name="init_all">
    <!-- Create the time stamp -->
    <tstamp/>

    <!-- Grab jar files for groovy-all -->
    <exec dir="groovy-all" executable="sh">
      <arg line="-c 'mvn install dependency:copy-dependencies'" />
    </exec>
    <copy todir="${lib}" >
      <fileset dir="groovy-all/target/dependency">
        <include name="*.jar"/>
      </fileset>
    </copy>
    <exec dir="groovy-all" executable="sh">
      <arg line="-c 'mvn clean'" />
    </exec>
  </target>

   <!-- general classpath definition, incl. CLASSPATH env. variable,
   // but jars in lib directory have precedence over the CLASSPATH variable -->
  <path id="project.class.path">
    <fileset dir="${lib}">
      <include name="*.jar"/>
      <include name="*.zip"/>
    </fileset>
    <pathelement location="${build}/classes"/>
    <pathelement location="${build}/testcases"/>
    <pathelement path="${java.class.path}" />
  </path>

<!-- 
 ============================================================================
 Compilation and documentation making stuff
 ============================================================================
-->

  <target name="init_compile" depends="init_all">
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}/classes"/>
  </target>

  <!-- Compile the java code from ${src} into ${build}/classes -->
  <target name="compile" depends="init_compile" 
   description="Compile kfGroovy and deposit class files in build/classes">
    <javac srcdir="${src}" 
      fork="yes" memoryMaximumSize="${javac_max_memory}"
      destdir="${build}/classes"
      optimize="${optimization}"
      debug="${debug}"
      deprecation="${deprecation}"
      source="1.8" target="1.8">

      <classpath refid="project.class.path" /> 
    </javac>
    <copy todir="${build}/classes" >
       <fileset dir="${src}">
         <include name="org/**/*.gif"/>
         <include name="org/**/*.png"/>
         <include name="org/**/*.jpeg"/>
         <include name="org/**/*.jpg"/>
         <include name="org/**/*.props"/>
         <include name="org/**/*.txt"/>
         <include name="org/**/*.xml"/>
         <include name="org/**/*.kfml"/>
         <include name="weka/**/*.gif"/>
         <include name="weka/**/*.kf"/>
         <include name="**/*.cup"/>
         <include name="**/*.flex"/>
         <include name="**/*.jflex"/>
         <include name="**/*.properties"/>
         <include name="**/*.default"/>
       </fileset>
    </copy>
  </target>

  <!-- Make the javadocs -->
  <target name="docs" 
          depends="init_all" 
          description="Make javadocs into ./doc">
    <mkdir dir="${doc}"/>
    <javadoc sourcepath="${src}" 
             classpathref="project.class.path"
             destdir="${doc}" 
             packagenames="org.*"
             Author="yes" 
             Public="yes"
             link="http://weka.sourceforge.net/doc.dev/"
             maxmemory="256m"/>    
  </target> 


<!--
  ===========================================================================
  Unit testing stuff
  ===========================================================================
-->
<!-- Junit testing initialization -->
  <target name="init_tests" depends="init_all">
    <available property="junit.present" classname="junit.framework.TestCase"/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}/testcases"/>
    <mkdir dir="${reports}"/>
  </target>

  <!-- compile the testcases -->
  <target name="compile_tests" depends="init_tests, compile" 
   description="Compile unit tests into build/testcases">
     <javac srcdir="${src-test}" 
       fork="yes" memoryMaximumSize="${javac_max_memory}"
            destdir="${build}/testcases"
            optimize="${optimization}"
            debug="${debug}"
            deprecation="${deprecation}"
            source="1.8" target="1.8">
       <classpath refid="project.class.path" /> 
     </javac>
     <copy todir="${build}/testcases" >
       <fileset dir="${src-test}">
          <include name="**/*.arff"/>
          <include name="**/*.cost"/>
          <include name="**/*.xml"/>
          <include name="**/*.matrix"/>
       </fileset>
     </copy>
  </target>

  <!-- Put everything in ${build}/testcases into the ${package}-tests.jar file -->
  <target name="jar_tests" depends="compile_tests, init_dist"
   description="Creates a jar file with the test cases in ./dist">
    <jar jarfile="${dist}/${package}-tests.jar" 
      basedir="${build}/testcases">
    </jar>
  </target>

<!--
  ===========================================================================
  Release making stuff
  ===========================================================================
-->

  <target name = "init_dist" depends="init_all">
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}"/>
  </target>

  <!-- Put everything in ${build}/classes into the ${package}.jar file -->
  <target name="exejar" depends="compile, docs, init_dist"
   description="Create a binary jar file in ./dist">
    <jar jarfile="${dist}/${package}.jar" 
      basedir="${build}/classes">
    </jar>
  </target>

  <target name="make_package" depends="exejar" description="Make the weka package zip file">
    <mkdir dir="${dist}/${package}"/>
    <copy todir="${dist}/${package}">
      <fileset dir="${dist}">
        <include name="*.jar"/>
      </fileset>
    </copy>
    <delete>
      <fileset dir="${dist}">
        <include name="*.jar"/>
      </fileset>
    </delete>
    <copy file="Description.props"
          todir="${dist}/${package}"/>
    <copy file="Beans.props"
          todir="${dist}/${package}"/>
    <copy file="PluginManager.props"
          todir="${dist}/${package}"/>
    <copy file="MacOSXDefaults.groovy"
          todir="${dist}/${package}"/>
    <!-- The Groovy .jar files need to go into the package root. -->
    <copy todir="${dist}/${package}" >
       <fileset dir="${lib}">
         <include name="groovy-*.jar"/>
       </fileset>
    </copy>
    <!-- The other .jar files can (hopefully) go into the lib folder -->
    <mkdir dir="${dist}/${package}/lib"/>
    <copy todir="${dist}/${package}/lib" >
      <fileset dir="${lib}">
	<exclude name="groovy-*.jar"/>
        <include name="*.jar"/>
        <include name="*.zip"/>
      </fileset>
    </copy>
    <mkdir dir="${dist}/${package}/doc"/>
    <copy todir="${dist}/${package}/doc" >
       <fileset dir="${doc}">
         <include name="**/*"/>
       </fileset>
    </copy>
    <mkdir dir="${dist}/${package}/src"/>
    <copy todir="${dist}/${package}" >
       <fileset dir=".">
         <include name="*.xml"/>
         <include name="src/**/*.excludes"/>
         <include name="src/**/*.gif"/>
         <include name="src/**/*.java"/>
         <include name="src/**/*.jpeg"/>
         <include name="src/**/*.jpg"/>
         <include name="src/**/*.props"/>
         <include name="src/**/*.txt"/>
         <include name="src/**/*.xml"/>
         <include name="src/**/*.cup"/>
         <include name="src/**/*.flex"/>
         <include name="src/**/*.jflex"/>
         <include name="src/**/*.properties"/>
         <include name="src/**/*.default"/>
         <include name="src/**/*.cost"/>
         <include name="src/**/*.arff"/>
         <include name="src/**/*.matrix"/>
         <include name="src/**/icons/*"/>
       </fileset>
    </copy>
    <zip destfile="${dist}/${package}.zip" 
      basedir="${dist}/${package}">
    </zip>
  </target>

  <!-- Put all .java, and .props files into ${dist}/${package}-src.jar-->
  <target name="srcjar" depends="init_dist, init_all"
   description="Create a jar file containing ${package} source in ./dist">  
    <!-- jar up the source -->
    <jar jarfile="${dist}/${package}-src.jar" 
      basedir=".">
      <include name="*.xml"/>
      <include name="src/**/*.excludes"/>
      <include name="src/**/*.gif"/>
      <include name="src/**/*.java"/>
      <include name="src/**/*.jpeg"/>
      <include name="src/**/*.jpg"/>
      <include name="src/**/*.props"/>
      <include name="src/**/*.txt"/>
      <include name="src/**/*.xml"/>
      <include name="src/**/*.cup"/>
      <include name="src/**/*.flex"/>
      <include name="src/**/*.jflex"/>
      <include name="src/**/*.properties"/>
      <include name="src/**/*.default"/>
      <include name="src/**/*.cost"/>
      <include name="src/**/*.arff"/>
      <include name="src/**/*.matrix"/>
      <include name="lib/**/*.jar"/>
    </jar>
  </target>

<!-- Clean -->
  <target name="clean" depends="init_all"
   description="Removes the build, dist and reports directories and the lib folder">
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
    <delete dir="${reports}"/>
    <delete dir="${lib}"/>
  </target>

  <target name="superclean" depends="clean"
   description="Clean plus removes source trees! and doc directories">
  <!-- WARNING, this deletes the source and doc directories -->
    <delete dir="${src}"/>
    <delete dir="${doc}"/>
  </target>
</project>
