<project name="weka-package" default="compile" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
<!-- 
  ===========================================================================
   Ant build file for a weka package

   Type ant -projecthelp for targets and descriptions.

   $Revision: 12253 $
  ===========================================================================
-->

<!--<import file="build-res/subfloor.xml"/> -->

  <!-- set global properties for this build -->
  <property name="src" value="src/main/java"/>
  <property name="src-test" value="src/test/java"/>
  <property name="lib" value="lib" />
  <property name="build" value="build"/>
  <property name="dist"  value="dist"/>
  <property name="doc"  value="doc"/>
  <property name="javac_max_memory" value="256m"/>
  <property name="debug" value="on" />
  <property name="package" value="distributedWekaSpark3Dev"/>

<property file="build.properties"
          description="Properties customized for your particular project belong in this file." />

  <target name="init_all">
    <!-- Create the time stamp -->
    <tstamp/>
  </target>

   <!-- general classpath definition, incl. CLASSPATH env. variable,
   // but jars in lib directory have precedence over the CLASSPATH variable -->
  <path id="project.class.path">
    <fileset dir="${lib}">
      <include name="*.jar"/>
      <include name="*.zip"/>
    </fileset>
    <pathelement location="${build}/classes"/>
    <pathelement location="${build}/testcases"/>
    <pathelement path="${java.class.path}" />
  </path>

<!-- 
 ============================================================================
 Compilation and documentation making stuff
 ============================================================================
-->

  <target name="init_compile" depends="init_all">
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}/classes"/>
  </target>

  <!-- Compile the java code from ${src}/weka into ${build}/classes -->
  <target name="compile" depends="init_compile" 
   description="Compile package and deposit class files in build/classes">
    <javac srcdir="${src}" 
      fork="yes" memoryMaximumSize="${javac_max_memory}"
      destdir="${build}/classes"
      optimize="${optimization}"
      debug="${debug}"
      deprecation="${deprecation}"
      source="1.8" target="1.8">

      <classpath refid="project.class.path" /> 
    </javac>
    <copy todir="${build}/classes" >
       <fileset dir="${src}">
         <include name="**/*.gif"/>
         <include name="**/*.png"/>
         <include name="**/*.jpeg"/>
         <include name="**/*.jpg"/>
         <include name="**/*.props"/>
         <include name="**/*.txt"/>
         <include name="**/*.xml"/>
         <include name="**/*.cup"/>
         <include name="**/*.flex"/>
         <include name="**/*.jflex"/>
         <include name="**/*.properties"/>
         <include name="**/*.kfml"/>
         <include name="**/*.kf"/>
         <include name="**/*.default"/>
       </fileset>
    </copy>
  </target>

  <!-- Make the javadocs -->
  <target name="docs" 
          depends="init_all" 
          description="Make javadocs into ./doc">
    <mkdir dir="${doc}"/>
    <javadoc sourcepath="${src}" 
             classpathref="project.class.path"
             destdir="${doc}" 
             Author="yes" 
             Public="yes"
             link="http://weka.sourceforge.net/doc.dev/"
             maxmemory="256m"/>          
  </target> 


<!--
  ===========================================================================
  Unit testing stuff
  ===========================================================================
-->
<!-- Junit testing initialization -->
  <target name="init_tests" depends="init_all">
    <available property="junit.present" classname="junit.framework.TestCase"/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}/testcases"/>
    <!-- make this if it doesn't exist so that the compile_test task doesn't faile for 
         stuff that doesn't have test cases -->
    <mkdir dir="${src-test}"/>
  </target>

  <!-- compile the testcases -->
  <target name="compile_tests" depends="init_tests, compile" 
   description="Compile unit tests into build/testcases">
     <javac srcdir="${src-test}" 
       fork="yes" memoryMaximumSize="${javac_max_memory}"
            destdir="${build}/testcases"
            optimize="${optimization}"
            debug="${debug}"
            deprecation="${deprecation}"
            source="1.8" target="1.8">
       <classpath refid="project.class.path" /> 
     </javac>
     <copy todir="${build}/testcases" >
       <fileset dir="${src-test}">
          <include name="**/*.arff"/>
          <include name="**/*.cost"/>
          <include name="**/*.xml"/>
          <include name="**/*.matrix"/>
       </fileset>
     </copy>
  </target>

  <!-- Put everything in ${build}/testcases into the ${package}-tests.jar file -->
  <target name="jar_tests" depends="compile_tests, init_dist"
   description="Creates a jar file with the test cases in ./dist. Run with -Dpackage=[package name]">
    <jar jarfile="${dist}/${package}-tests.jar" 
      basedir="${build}/testcases">
    </jar>
  </target>

<!--
  ===========================================================================
  Release making stuff
  ===========================================================================
-->

  <target name = "init_dist" depends="init_all">
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}"/>
  </target>

  <!-- Put everything in ${build}/classes into the ${package}.jar file -->
  <target name="exejar" depends="resolve, compile, docs, init_dist"
   description="Create a binary jar file in ./dist">
    <jar jarfile="${dist}/${package}.jar" 
      basedir="${build}/classes">
    </jar>
  </target>

  <target name="make_package" depends="exejar" description="Make the package zip file. Run with -Dpackage=[package name]">
    <mkdir dir="${dist}/${package}"/>
    <copy todir="${dist}/${package}">
      <fileset dir="${dist}">
        <include name="*.jar"/>
      </fileset>
    </copy>
    <delete>
      <fileset dir="${dist}">
        <include name="*.jar"/>
      </fileset>
    </delete>
    <copy file="Description.props"
          todir="${dist}/${package}"/>
    <mkdir dir="${dist}/${package}/lib"/>
    <copy todir="${dist}/${package}/lib" >
       <fileset dir="${lib}">
         <include name="*.jar"/>
         <include name="*.zip"/>
         <exclude name="weka.jar"/>
         <exclude name="pdm*.jar"/>
       </fileset>
    </copy>
    <mkdir dir="${dist}/${package}/doc"/>
    <copy todir="${dist}/${package}/doc" >
       <fileset dir="${doc}">
         <include name="**/*"/>
       </fileset>
    </copy>

    <mkdir dir="${dist}/${package}/sample_data"/>
    <copy todir="${dist}/${package}/sample_data" >
       <fileset dir="sample_data">
         <include name="**/*"/>
       </fileset>
    </copy>
    <mkdir dir="${dist}/${package}/windows"/>
    <copy todir="${dist}/${package}/windows" >
       <fileset dir="windows">
         <include name="**/*"/>
       </fileset>
    </copy>

    <mkdir dir="${dist}/${package}/src"/>
    <copy todir="${dist}/${package}" >
       <fileset dir=".">
         <include name="*.xml"/>
         <include name="*.properties"/>
	 <include name="*.props"/>
         <include name="src/**/*.excludes"/>
         <include name="src/**/*.gif"/>
         <include name="src/**/*.java"/>
         <include name="src/**/*.jpeg"/>
         <include name="src/**/*.jpg"/>
         <include name="src/**/*.props"/>
         <include name="src/**/*.txt"/>
         <include name="src/**/*.xml"/>
         <include name="src/**/*.cup"/>
         <include name="src/**/*.flex"/>
         <include name="src/**/*.jflex"/>
         <include name="src/**/*.properties"/>
         <include name="src/**/*.default"/>
         <include name="src/**/*.cost"/>
         <include name="src/**/*.arff"/>
         <include name="src/**/*.matrix"/>
         <include name="src/**/*.kfml"/>
       </fileset>
    </copy>
    <zip destfile="${dist}/${package}.zip" 
      basedir="${dist}/${package}">
    </zip>
    <copy file="${dist}/${package}/${package}.jar"
          todir="${dist}"/>
  </target>

  <!-- Put all .java, and .props files into ${dist}/${package}-src.jar-->
  <target name="srcjar" depends="init_dist, init_all"
   description="Create a jar file containing weka source in ./dist. Run with -Dpackage=[package name]">  
    <!-- jar up the source -->
    <jar jarfile="${dist}/${package}-src.jar" 
      basedir=".">
      <include name="*.xml"/>
      <include name="src/**/*.excludes"/>
      <include name="src/**/*.gif"/>
      <include name="src/**/*.java"/>
      <include name="src/**/*.jpeg"/>
      <include name="src/**/*.jpg"/>
      <include name="src/**/*.props"/>
      <include name="src/**/*.txt"/>
      <include name="src/**/*.xml"/>
      <include name="src/**/*.cup"/>
      <include name="src/**/*.flex"/>
      <include name="src/**/*.jflex"/>
      <include name="src/**/*.properties"/>
      <include name="src/**/*.default"/>
      <include name="src/**/*.cost"/>
      <include name="src/**/*.arff"/>
      <include name="src/**/*.matrix"/>
      <include name="lib/**/*.jar"/>
    </jar>
  </target>

<!-- Clean -->
  <target name="clean" depends="init_all"
   description="Removes the build, dist and reports directories">
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
    <delete dir="${doc}"/>
  </target>

  <target name="superclean" depends="clean"
   description="Clean plus removes lib directory!">
  <!-- WARNING, this deletes the lib directory -->
    <delete dir="${lib}"/>
  </target>

<!-- Ivy -->

<property name="ivy.install.version" value="2.5.0"/>
<condition property="ivy.home" value="${env.IVY_HOME}">
  <isset property="env.IVY_HOME"/>
</condition>
<property name="ivy.home" value="${user.home}/.ant"/>
<property name="ivy.jar.dir" value="${ivy.home}/lib"/>
<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>

<target name="download-ivy" unless="offline">
  
  <mkdir dir="${ivy.jar.dir}"/>
  <!-- download Ivy from web site so that it can be used even without any special installation -->
  <get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
       dest="${ivy.jar.file}" usetimestamp="true"/>
</target>

<target name="init-ivy" depends="download-ivy">
  <!-- try to load Ivy here from Ivy home, in case the user has not already dropped
       it into Ant's lib dir (note that the latter copy will always take precedence).
       We will not fail as long as local lib dir exists (it may be empty) and
       Ivy is in at least one of Ant's lib dir or the local lib dir. -->
  <path id="ivy.lib.path">
    <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
    
  </path>
  <taskdef resource="org/apache/ivy/ant/antlib.xml"
           uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
</target>

<target name="resolve" depends="init-ivy" description="Download required dependencies">
    <ivy:configure/>

    <ivy:resolve file="${ivy.dep.file}" conf="${ivy.configurations}"/>

    <ivy:retrieve pattern="${ivy.retrieve.pattern}" conf="${ivy.configurations}"/>
</target>
</project>
