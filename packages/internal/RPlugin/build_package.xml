<project name="weka-package" default="compile" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
<!-- 
  ===========================================================================
   Ant build file for weka a weka package. 

   Type ant -projecthelp for targets and descriptions.

   $Revision$
  ===========================================================================
-->


  <!-- set global properties for this build -->
  <property name="src" value="src/main/java"/>
  <property name="src-test" value="src/test/java"/>
  <property name="lib" value="lib" />
  <property name="libExt" value="libExternal"/>
  <property name="libExtPreload" value="libExternalPreload"/>
  <property name="build" value="build"/>
  <property name="dist"  value="dist"/>
  <property name="doc"  value="doc"/>
  <property name="javac_max_memory" value="256m"/>
  <property name="debug" value="on" />
  <property name="package-inject" value="rengine-weka-inject-classes"/>
  <property name="package" value="RPlugin"/>

  <target name="init_all">
    <!-- Create the time stamp -->
    <tstamp/>
  </target>

   <!-- general classpath definition, incl. CLASSPATH env. variable,
   // but jars in lib directory have precedence over the CLASSPATH variable -->
  <path id="project.class.path">
    <fileset dir="${lib}">
      <include name="*.jar"/>
      <include name="*.zip"/>
    </fileset>
    <fileset dir="${libExt}">
      <include name="*.jar"/>
    </fileset>
    <pathelement location="${build}/classes"/>
    <pathelement location="${build}/testcases"/>
    <pathelement path="${java.class.path}" />
  </path>

<!-- 
 ============================================================================
 Compilation and documentation making stuff
 ============================================================================
-->

  <target name="init_compile" depends="init_all">
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}/classes"/>
    <mkdir dir="${build}/injectedClasses"/>
  </target>

  <!-- Compile key Weka R API classes only and make a jar of these-->
  <target name="compile-r-api" depends="init_compile, init_dist" 
          description="Compile and make a jar of just those Weka packaged R-API classes that another R-using application might want to use">
    <javac srcdir="${src}" 
      fork="yes" memoryMaximumSize="${javac_max_memory}"
      destdir="${build}/classes"
      optimize="${optimization}"
      debug="${debug}"
      deprecation="${deprecation}"
      source="1.8" target="1.8">
      <classpath refid="project.class.path" /> 
    </javac>

    <!-- needed to compile against, but not to include as a lib (.bytecode versions are injected into the root classloader at run time -->
    <jar jarfile="${dist}/weka-r-api-compile-only.jar">
      <fileset dir="${build}/classes">
        <include name="**/RSessionAPI.class"/>
        <include name="**/RLoggerAPI.class"/>
        <include name="**/JavaGDListener.class"/>
        <include name="**/JavaGDNotifier.class"/>
        <include name="**/JavaGDOffscreenRenderer.class"/>
      </fileset>
    </jar>

    <!-- needed to compile against and at run time (include this as a lib) -->
    <jar jarfile="${dist}/weka-r-api.jar">
      <fileset dir="${build}/classes">
        <include name="**/RSession.class"/>
        <include name="**/RSessionException.class"/>
        <include name="**/WekaJavaGD.class"/>
        <include name="**/JRILoader.class"/>
      </fileset>
    </jar>
  </target>

  <!-- Compile the java code from ${src}/weka into ${build}/classes -->
  <target name="compile" depends="init_compile, compile-r-api"
   description="Compile package and deposit class files in build/classes">
    <copy file="${libExt}/javaGD-0.6-4.jar" toDir="${lib}" />
    <copy file="${libExt}/JRI.jar" toDir="${lib}" />
    <copy file="${libExt}/JRIEngine.jar" toDir="${lib}" />
    <copy file="${libExt}/jna-5.8.0.jar" toDir="${lib}" />
    <copy file="${libExt}/jna-platform-5.8.0.jar" toDir="${lib}" />
    <copy file="${libExt}/xmlpull-1.1.3.1.jar" toDir="${lib}" />
    <copy file="${libExt}/xstream-1.4.17.jar" toDir="${lib}" />
    <copy file="${libExt}/kxml2-min-2.3.0.jar" toDir="${lib}" />
    <copy file="${libExt}/xpp3_min-1.1.4c.jar" toDir="${lib}" />
    <javac srcdir="${src}"
      fork="yes" memoryMaximumSize="${javac_max_memory}"
      destdir="${build}/classes"
      optimize="${optimization}"
      debug="${debug}"
      deprecation="${deprecation}"
      source="1.6" target="1.6">

      <classpath refid="project.class.path" /> 
    </javac>
    <move file="${build}/classes/weka/core/RLoggerAPI.class" tofile="${build}/injectedClasses/weka/core/RLoggerAPI.bytecode"/>
    <move file="${build}/classes/weka/core/RSessionAPI.class" tofile="${build}/injectedClasses/weka/core/RSessionAPI.bytecode"/>
    <move file="${build}/classes/weka/core/RSessionImpl.class" tofile="${build}/injectedClasses/weka/core/RSessionImpl.bytecode"/>
    <move file="${build}/classes/weka/core/RniIdle.class" tofile="${build}/injectedClasses/weka/core/RniIdle.bytecode"/>
    <move file="${build}/classes/weka/core/REngineStartup.class" tofile="${build}/injectedClasses/weka/core/REngineStartup.bytecode"/>
    <move file="${build}/classes/weka/core/JRINativeLoader.class" tofile="${build}/injectedClasses/weka/core/JRINativeLoader.bytecode"/>
    <move file="${build}/classes/weka/core/JavaGDOffscreenRenderer.class" tofile="${build}/injectedClasses/weka/core/JavaGDOffscreenRenderer.bytecode"/>
    <move file="${build}/classes/weka/core/JavaGDListener.class" tofile="${build}/injectedClasses/weka/core/JavaGDListener.bytecode"/>
    <move file="${build}/classes/weka/core/JavaGDNotifier.class" tofile="${build}/injectedClasses/weka/core/JavaGDNotifier.bytecode"/>
    <copy todir="${build}/classes" >
       <fileset dir="${src}">
         <include name="**/*.gif"/>
         <include name="**/*.png"/>
         <include name="**/*.jpeg"/>
         <include name="**/*.jpg"/>
         <include name="**/*.props"/>
         <include name="**/*.txt"/>
         <include name="**/*.xml"/>
         <include name="**/*.cup"/>
         <include name="**/*.flex"/>
         <include name="**/*.jflex"/>
         <include name="**/*.properties"/>
         <include name="**/*.default"/>
         <include name="**/*.kfml"/>
         <include name="**/*.kf"/>
       </fileset>
    </copy>

    <unzip src="${libExtPreload}/REngine.zip" dest="${build}/injectedClasses"/>
    <unzip src="${libExtPreload}/rJavaClassLoader.zip" dest="${build}/injectedClasses"/>
  </target>

  <!-- Make the javadocs -->
  <target name="docs" 
          depends="init_all" 
          description="Make javadocs into ./doc">
    <mkdir dir="${doc}"/>
    <javadoc sourcepath="${src}" 
             classpathref="project.class.path"
             destdir="${doc}" 
             Author="yes" 
             Public="yes"
             link="http://weka.sourceforge.net/doc.dev/"
             maxmemory="256m"/>          
  </target> 


<!--
  ===========================================================================
  Unit testing stuff
  ===========================================================================
-->
<!-- Junit testing initialization -->
  <target name="init_tests" depends="init_all">
    <available property="junit.present" classname="junit.framework.TestCase"/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}/testcases"/>
    <!-- make this if it doesn't exist so that the compile_test task doesn't faile for 
         stuff that doesn't have test cases -->
    <mkdir dir="${src-test}"/>
  </target>

  <!-- compile the testcases -->
  <target name="compile_tests" depends="init_tests, compile" 
   description="Compile unit tests into build/testcases">
     <javac srcdir="${src-test}" 
       fork="yes" memoryMaximumSize="${javac_max_memory}"
            destdir="${build}/testcases"
            optimize="${optimization}"
            debug="${debug}"
            deprecation="${deprecation}"
            source="1.6" target="1.6">
       <classpath refid="project.class.path" /> 
     </javac>
     <copy todir="${build}/testcases" >
       <fileset dir="${src-test}">
          <include name="**/*.arff"/>
          <include name="**/*.cost"/>
          <include name="**/*.xml"/>
          <include name="**/*.matrix"/>
       </fileset>
     </copy>
  </target>

  <!-- Put everything in ${build}/testcases into the ${package}-tests.jar file -->
  <target name="jar_tests" depends="compile_tests, init_dist"
   description="Creates a jar file with the test cases in ./dist. Run with -Dpackage=[package name]">
    <jar jarfile="${dist}/${package}-tests.jar" 
      basedir="${build}/testcases">
    </jar>
  </target>

<!--
  ===========================================================================
  Release making stuff
  ===========================================================================
-->

  <target name = "init_dist" depends="init_all">
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}"/>
  </target>

  <!-- Put everything in ${build}/classes into the ${package}.jar file -->
  <target name="exejar" depends="compile, docs, init_dist"
   description="Create a binary jar file in ./dist">
    <jar jarfile="${dist}/${package}.jar" 
      basedir="${build}/classes">
    </jar>

    <!-- Separate jar file for the injected bytecode classes -->
    <jar jarfile="${dist}/${package-inject}.jar"
         basedir="${build}/injectedClasses">
    </jar>
  </target>

  <target name="make_package" depends="exejar" description="Make the package zip file. Run with -Dpackage=[package name]">
    <mkdir dir="${dist}/${package}"/>
    <copy todir="${dist}/${package}">
      <fileset dir="${dist}">
        <include name="*.jar"/>
        <exclude name="weka-r-api-compile-only.jar"/>
        <exclude name="weka-r-api.jar"/>
      </fileset>
    </copy>
    <delete>
      <fileset dir="${dist}">
        <include name="*.jar"/>
        <!-- preserve all the artefacts that we want available -->
        <exclude name="rengine-weka-inject-classes.jar"/>
        <exclude name="weka-r-api-compile-only.jar"/>
        <exclude name="weka-r-api.jar"/>
      </fileset>
    </delete>
    <copy file="Description.props"
          todir="${dist}/${package}"/>
    <mkdir dir="${dist}/${package}/lib"/>
    <copy todir="${dist}/${package}/lib" >
       <fileset dir="${lib}">
         <include name="*.jar"/>
         <include name="*.zip"/>
         <exclude name="weka.jar"/>
         <exclude name="pdm*.jar"/>
       </fileset>
    </copy>
    <mkdir dir="${dist}/${package}/doc"/>
    <copy todir="${dist}/${package}/doc" >
       <fileset dir="${doc}">
         <include name="**/*"/>
       </fileset>
    </copy>
    <mkdir dir="${dist}/${package}/${libExt}"/>
    <copy todir="${dist}/${package}/${libExt}" >
       <fileset dir="${libExt}">
         <include name="**/*"/>
       </fileset>
    </copy>
    <mkdir dir="${dist}/${package}/${libExtPreload}"/>
    <copy todir="${dist}/${package}/${libExtPreload}" >
       <fileset dir="${libExtPreload}">
         <include name="**/*"/>
       </fileset>
    </copy>
    <mkdir dir="${dist}/${package}/src"/>
    <copy todir="${dist}/${package}" >
       <fileset dir=".">
         <include name="*.xml"/>
         <include name="*.properties"/>
         <include name="*.props"/>
         <include name="src/**/*.excludes"/>
         <include name="src/**/*.gif"/>
         <include name="src/**/*.java"/>
         <include name="src/**/*.jpeg"/>
         <include name="src/**/*.jpg"/>
         <include name="src/**/*.props"/>
         <include name="src/**/*.txt"/>
         <include name="src/**/*.xml"/>
         <include name="src/**/*.cup"/>
         <include name="src/**/*.flex"/>
         <include name="src/**/*.jflex"/>
         <include name="src/**/*.properties"/>
         <include name="src/**/*.default"/>
         <include name="src/**/*.cost"/>
         <include name="src/**/*.arff"/>
         <include name="src/**/*.matrix"/>
         <include name="src/**/*.kfml"/>
       </fileset>
    </copy>
    <zip destfile="${dist}/${package}.zip" 
      basedir="${dist}/${package}">
    </zip>
    <copy file="${dist}/${package}/${package}.jar"
          todir="${dist}"/>
  </target>

  <!-- Put all .java, and .props files into ${dist}/${package}-src.jar-->
  <target name="srcjar" depends="init_dist, init_all"
   description="Create a jar file containing weka source in ./dist. Run with -Dpackage=[package name]">  
    <!-- jar up the source -->
    <jar jarfile="${dist}/${package}-src.jar" 
      basedir=".">
      <include name="*.xml"/>
      <include name="src/**/*.excludes"/>
      <include name="src/**/*.gif"/>
      <include name="src/**/*.java"/>
      <include name="src/**/*.jpeg"/>
      <include name="src/**/*.jpg"/>
      <include name="src/**/*.props"/>
      <include name="src/**/*.txt"/>
      <include name="src/**/*.xml"/>
      <include name="src/**/*.cup"/>
      <include name="src/**/*.flex"/>
      <include name="src/**/*.jflex"/>
      <include name="src/**/*.properties"/>
      <include name="src/**/*.default"/>
      <include name="src/**/*.cost"/>
      <include name="src/**/*.arff"/>
      <include name="src/**/*.matrix"/>
      <include name="lib/**/*.jar"/>
    </jar>
  </target>

<!-- Clean -->
  <target name="clean" depends="init_all"
   description="Removes the build, dist and reports directories">
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
    <delete dir="${doc}"/>
  </target>

  <target name="superclean" depends="clean"
   description="Clean plus removes source trees!">
  <!-- WARNING, this deletes the source and doc directories -->
    <delete dir="${src}"/>
  </target>
</project>
